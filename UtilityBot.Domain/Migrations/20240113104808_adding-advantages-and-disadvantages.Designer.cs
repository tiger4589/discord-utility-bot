// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UtilityBot.Domain.Database;

#nullable disable

namespace UtilityBot.Domain.Migrations
{
    [DbContext(typeof(UtilityBotContext))]
    [Migration("20240113104808_adding-advantages-and-disadvantages")]
    partial class addingadvantagesanddisadvantages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.CapsProtectionConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MinimumLength")
                        .HasColumnType("int");

                    b.Property<int>("MinimumPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CapsProtectionConfigurations");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.CasinoModels.HorseRaces.Horse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdvantageOn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisadvantageOn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OddsToOne")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Horses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdvantageOn = "Crystal",
                            DisadvantageOn = "Jungle",
                            Name = "Thunderhoof",
                            OddsToOne = 2
                        },
                        new
                        {
                            Id = 2,
                            AdvantageOn = "Mirage",
                            DisadvantageOn = "Nebula",
                            Name = "Midnight Mirage",
                            OddsToOne = 3
                        },
                        new
                        {
                            Id = 3,
                            AdvantageOn = "Frostbite",
                            DisadvantageOn = "Serenity",
                            Name = "Blaze Lightning",
                            OddsToOne = 4
                        },
                        new
                        {
                            Id = 4,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Techno",
                            Name = "Mystic Gallop",
                            OddsToOne = 5
                        },
                        new
                        {
                            Id = 5,
                            AdvantageOn = "Coral",
                            DisadvantageOn = "Inferno",
                            Name = "Starstrider",
                            OddsToOne = 6
                        },
                        new
                        {
                            Id = 6,
                            AdvantageOn = "Serenity",
                            DisadvantageOn = "Crystal",
                            Name = "Shadowfax",
                            OddsToOne = 7
                        },
                        new
                        {
                            Id = 7,
                            AdvantageOn = "Mirage",
                            DisadvantageOn = "Nebula",
                            Name = "Solar Eclipse",
                            OddsToOne = 8
                        },
                        new
                        {
                            Id = 8,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Frostbite",
                            Name = "Velvet Victory",
                            OddsToOne = 9
                        },
                        new
                        {
                            Id = 9,
                            AdvantageOn = "Nebula",
                            DisadvantageOn = "Techno",
                            Name = "Lunar Lullaby",
                            OddsToOne = 10
                        },
                        new
                        {
                            Id = 10,
                            AdvantageOn = "Frostbite",
                            DisadvantageOn = "Coral",
                            Name = "Silver Streak",
                            OddsToOne = 11
                        },
                        new
                        {
                            Id = 11,
                            AdvantageOn = "Techno",
                            DisadvantageOn = "Serenity",
                            Name = "Quantum Quicksilver",
                            OddsToOne = 12
                        },
                        new
                        {
                            Id = 12,
                            AdvantageOn = "Coral",
                            DisadvantageOn = "Inferno",
                            Name = "Celestial Sprinter",
                            OddsToOne = 2
                        },
                        new
                        {
                            Id = 13,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Nebula",
                            Name = "Ember Echo",
                            OddsToOne = 3
                        },
                        new
                        {
                            Id = 14,
                            AdvantageOn = "Frostbite",
                            DisadvantageOn = "Serenity",
                            Name = "Neptune's Nudge",
                            OddsToOne = 4
                        },
                        new
                        {
                            Id = 15,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Techno",
                            Name = "Serendipity Stride",
                            OddsToOne = 5
                        },
                        new
                        {
                            Id = 16,
                            AdvantageOn = "Serenity",
                            DisadvantageOn = "Crystal",
                            Name = "Dreamweaver",
                            OddsToOne = 6
                        },
                        new
                        {
                            Id = 17,
                            AdvantageOn = "Mirage",
                            DisadvantageOn = "Nebula",
                            Name = "Galactic Glide",
                            OddsToOne = 7
                        },
                        new
                        {
                            Id = 18,
                            AdvantageOn = "Frostbite",
                            DisadvantageOn = "Serenity",
                            Name = "Aurora Borealis",
                            OddsToOne = 8
                        },
                        new
                        {
                            Id = 19,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Techno",
                            Name = "Phoenix Fury",
                            OddsToOne = 9
                        },
                        new
                        {
                            Id = 20,
                            AdvantageOn = "Coral",
                            DisadvantageOn = "Inferno",
                            Name = "Nebula Nova",
                            OddsToOne = 10
                        },
                        new
                        {
                            Id = 21,
                            AdvantageOn = "Techno",
                            DisadvantageOn = "Serenity",
                            Name = "Velvet Vortex",
                            OddsToOne = 11
                        },
                        new
                        {
                            Id = 22,
                            AdvantageOn = "Coral",
                            DisadvantageOn = "Inferno",
                            Name = "Whispering Wind",
                            OddsToOne = 12
                        },
                        new
                        {
                            Id = 23,
                            AdvantageOn = "Serenity",
                            DisadvantageOn = "Crystal",
                            Name = "Radiant Rainstorm",
                            OddsToOne = 2
                        },
                        new
                        {
                            Id = 24,
                            AdvantageOn = "Mirage",
                            DisadvantageOn = "Nebula",
                            Name = "Spectral Sprint",
                            OddsToOne = 3
                        },
                        new
                        {
                            Id = 25,
                            AdvantageOn = "Frostbite",
                            DisadvantageOn = "Serenity",
                            Name = "Dragonfly Dash",
                            OddsToOne = 4
                        },
                        new
                        {
                            Id = 26,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Techno",
                            Name = "Enchanted Equestrian",
                            OddsToOne = 5
                        },
                        new
                        {
                            Id = 27,
                            AdvantageOn = "Oasis",
                            DisadvantageOn = "Inferno",
                            Name = "Pegasus Prism",
                            OddsToOne = 6
                        },
                        new
                        {
                            Id = 28,
                            AdvantageOn = "Techno",
                            DisadvantageOn = "Serenity",
                            Name = "Radiant Racer",
                            OddsToOne = 7
                        },
                        new
                        {
                            Id = 29,
                            AdvantageOn = "Coral",
                            DisadvantageOn = "Inferno",
                            Name = "Zenith Zephyr",
                            OddsToOne = 8
                        },
                        new
                        {
                            Id = 30,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Techno",
                            Name = "Cosmic Cascade",
                            OddsToOne = 9
                        },
                        new
                        {
                            Id = 31,
                            AdvantageOn = "Serenity",
                            DisadvantageOn = "Crystal",
                            Name = "Twilight Thunderbolt",
                            OddsToOne = 10
                        },
                        new
                        {
                            Id = 32,
                            AdvantageOn = "Mirage",
                            DisadvantageOn = "Nebula",
                            Name = "Mystic Moonlight",
                            OddsToOne = 11
                        },
                        new
                        {
                            Id = 33,
                            AdvantageOn = "Frostbite",
                            DisadvantageOn = "Serenity",
                            Name = "Nebulous Nectar",
                            OddsToOne = 12
                        },
                        new
                        {
                            Id = 34,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Techno",
                            Name = "Stardust Sizzle",
                            OddsToOne = 2
                        },
                        new
                        {
                            Id = 35,
                            AdvantageOn = "Coral",
                            DisadvantageOn = "Inferno",
                            Name = "Quantum Quasar",
                            OddsToOne = 3
                        },
                        new
                        {
                            Id = 36,
                            AdvantageOn = "Techno",
                            DisadvantageOn = "Oasis",
                            Name = "Shadow Symphony",
                            OddsToOne = 4
                        },
                        new
                        {
                            Id = 37,
                            AdvantageOn = "Coral",
                            DisadvantageOn = "Inferno",
                            Name = "Celestial Cyclone",
                            OddsToOne = 5
                        },
                        new
                        {
                            Id = 38,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Techno",
                            Name = "Luminous Lightning",
                            OddsToOne = 6
                        },
                        new
                        {
                            Id = 39,
                            AdvantageOn = "Serenity",
                            DisadvantageOn = "Crystal",
                            Name = "Velvet Vibration",
                            OddsToOne = 7
                        },
                        new
                        {
                            Id = 40,
                            AdvantageOn = "Mirage",
                            DisadvantageOn = "Nebula",
                            Name = "Solar Serenity",
                            OddsToOne = 8
                        },
                        new
                        {
                            Id = 41,
                            AdvantageOn = "Frostbite",
                            DisadvantageOn = "Serenity",
                            Name = "Comet Canter",
                            OddsToOne = 9
                        },
                        new
                        {
                            Id = 42,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Techno",
                            Name = "Starlight Symphony",
                            OddsToOne = 10
                        },
                        new
                        {
                            Id = 43,
                            AdvantageOn = "Coral",
                            DisadvantageOn = "Inferno",
                            Name = "Phoenix Phenomenon",
                            OddsToOne = 11
                        },
                        new
                        {
                            Id = 44,
                            AdvantageOn = "Oasis",
                            DisadvantageOn = "Serenity",
                            Name = "Midnight Melody",
                            OddsToOne = 12
                        },
                        new
                        {
                            Id = 45,
                            AdvantageOn = "Coral",
                            DisadvantageOn = "Inferno",
                            Name = "Silver Seraph",
                            OddsToOne = 2
                        },
                        new
                        {
                            Id = 46,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Techno",
                            Name = "Lunar Luminary",
                            OddsToOne = 4
                        },
                        new
                        {
                            Id = 47,
                            AdvantageOn = "Serenity",
                            DisadvantageOn = "Crystal",
                            Name = "Nebula Nomad",
                            OddsToOne = 6
                        },
                        new
                        {
                            Id = 48,
                            AdvantageOn = "Mirage",
                            DisadvantageOn = "Nebula",
                            Name = "Whispering Whirlwind",
                            OddsToOne = 8
                        },
                        new
                        {
                            Id = 49,
                            AdvantageOn = "Frostbite",
                            DisadvantageOn = "Serenity",
                            Name = "Ethereal Elixir",
                            OddsToOne = 10
                        },
                        new
                        {
                            Id = 50,
                            AdvantageOn = "Jungle",
                            DisadvantageOn = "Techno",
                            Name = "Radiant Roamer",
                            OddsToOne = 12
                        });
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.CasinoModels.HorseRaces.HorseRace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RaceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HorseRaces");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.CasinoModels.HorseRaces.RaceStanding", b =>
                {
                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("HorseId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("RaceId", "HorseId");

                    b.ToTable("RaceStandings");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.CasinoModels.HorseRaces.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeBetweenRacesInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Length = 100,
                            Name = "Galactic Grand Circuit",
                            TimeBetweenRacesInMinutes = 5,
                            Type = "Nebula"
                        },
                        new
                        {
                            Id = 2,
                            Length = 150,
                            Name = "Celestial Speedway",
                            TimeBetweenRacesInMinutes = 10,
                            Type = "Crystal"
                        },
                        new
                        {
                            Id = 3,
                            Length = 200,
                            Name = "Nebula Nook Raceway",
                            TimeBetweenRacesInMinutes = 15,
                            Type = "Inferno"
                        },
                        new
                        {
                            Id = 4,
                            Length = 250,
                            Name = "Lunar Loop Lanes",
                            TimeBetweenRacesInMinutes = 20,
                            Type = "Oasis"
                        },
                        new
                        {
                            Id = 5,
                            Length = 300,
                            Name = "Cosmic Carousel Circuit",
                            TimeBetweenRacesInMinutes = 25,
                            Type = "Frostbite"
                        },
                        new
                        {
                            Id = 6,
                            Length = 350,
                            Name = "Starry Stride Speedway",
                            TimeBetweenRacesInMinutes = 30,
                            Type = "Techno"
                        },
                        new
                        {
                            Id = 7,
                            Length = 400,
                            Name = "Enchanted Equine Expressway",
                            TimeBetweenRacesInMinutes = 35,
                            Type = "Jungle"
                        },
                        new
                        {
                            Id = 8,
                            Length = 450,
                            Name = "Solar Sprints Circuit",
                            TimeBetweenRacesInMinutes = 40,
                            Type = "Coral"
                        },
                        new
                        {
                            Id = 9,
                            Length = 500,
                            Name = "Midnight Mirage Oval",
                            TimeBetweenRacesInMinutes = 45,
                            Type = "Serenity"
                        },
                        new
                        {
                            Id = 10,
                            Length = 1000,
                            Name = "Mystic Meadow Racetrack",
                            TimeBetweenRacesInMinutes = 50,
                            Type = "Mirage"
                        });
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.CasinoModels.HorseRaces.UserPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectPredictions")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("WrongPredictions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPredictions");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.CoderRequestVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("CoderRequestVerifications");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.EventsConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("EventsConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventName = "UserJoined",
                            IsEnabled = true
                        },
                        new
                        {
                            Id = 2,
                            EventName = "UserUnbanned",
                            IsEnabled = true
                        },
                        new
                        {
                            Id = 3,
                            EventName = "UserLeft",
                            IsEnabled = true
                        },
                        new
                        {
                            Id = 4,
                            EventName = "UserBanned",
                            IsEnabled = true
                        },
                        new
                        {
                            Id = 5,
                            EventName = "RoleCreated",
                            IsEnabled = true
                        },
                        new
                        {
                            Id = 6,
                            EventName = "RoleDeleted",
                            IsEnabled = true
                        },
                        new
                        {
                            Id = 7,
                            EventName = "RoleUpdated",
                            IsEnabled = true
                        },
                        new
                        {
                            Id = 8,
                            EventName = "GuildMemberUpdated",
                            IsEnabled = true
                        },
                        new
                        {
                            Id = 9,
                            EventName = "UserUpdated",
                            IsEnabled = true
                        },
                        new
                        {
                            Id = 10,
                            EventName = "MessageUpdated",
                            IsEnabled = true
                        },
                        new
                        {
                            Id = 11,
                            EventName = "MessageDeleted",
                            IsEnabled = true
                        });
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.JoinedServer", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuildId");

                    b.ToTable("JoinedServers");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.JokeConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("JokeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JokeConfigurations");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.LogConfiguration", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("GuildId");

                    b.ToTable("LogConfigurations");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.LogConfigurationAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("UpdateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogConfigurationsAudit");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.MagicEightBallConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MagicEightBallConfigurations");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.MagicEightBallResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MagicEightBallResponses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Message = "It is certain."
                        },
                        new
                        {
                            Id = 2,
                            Message = "It is decidedly so."
                        },
                        new
                        {
                            Id = 3,
                            Message = "Without a doubt."
                        },
                        new
                        {
                            Id = 4,
                            Message = "Yes definitely."
                        },
                        new
                        {
                            Id = 5,
                            Message = "You may rely on it."
                        },
                        new
                        {
                            Id = 6,
                            Message = "As I see it, yes."
                        },
                        new
                        {
                            Id = 7,
                            Message = "Most likely."
                        },
                        new
                        {
                            Id = 8,
                            Message = "Outlook good."
                        },
                        new
                        {
                            Id = 9,
                            Message = "Yes."
                        },
                        new
                        {
                            Id = 10,
                            Message = "Signs point to yes."
                        },
                        new
                        {
                            Id = 11,
                            Message = "Reply hazy, try again."
                        },
                        new
                        {
                            Id = 12,
                            Message = "Ask again later."
                        },
                        new
                        {
                            Id = 13,
                            Message = "Better not tell you now."
                        },
                        new
                        {
                            Id = 14,
                            Message = "Cannot predict now."
                        },
                        new
                        {
                            Id = 15,
                            Message = "Concentrate and ask again."
                        },
                        new
                        {
                            Id = 16,
                            Message = "Don't count on it."
                        },
                        new
                        {
                            Id = 17,
                            Message = "My reply is no."
                        },
                        new
                        {
                            Id = 18,
                            Message = "My sources say no."
                        },
                        new
                        {
                            Id = 19,
                            Message = "Outlook not so good."
                        },
                        new
                        {
                            Id = 20,
                            Message = "Very doubtful."
                        });
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.RumbleConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BotRoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmojiToWatch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("JoinGame")
                        .HasColumnType("bit");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("RumbleConfigurations");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.RumbleMessageConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RumbleMessageConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Message = "A new battle has started!"
                        });
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.UnoConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("UnoConfigurations");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.UserJoinConfiguration", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GuildId", "Action");

                    b.ToTable("UserJoinConfigurations");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.UserJoinConfigurationAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("UpdateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserJoinConfigurationsAudit");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.UserJoinMessage", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuildId");

                    b.ToTable("UserJoinMessages");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.UserJoinMessageAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserJoinMessageAudits");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.UserJoinRole", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("GuildId", "RoleId");

                    b.ToTable("UserJoinRoles");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.UserJoinRoleAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("UpdateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserJoinRoleAudits");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.UserNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AddedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("AddedByUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserNotes");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.VerifyConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("VerifyConfigurations");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.VerifyConfigurationAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("UpdateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VerifyConfigurationAudits");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.VerifyMessageConfiguration", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("GuildId");

                    b.ToTable("VerifyMessageConfigurations");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.VerifyMessageConfigurationAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("UpdateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VerifyMessageConfigurationAudits");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.LogConfiguration", b =>
                {
                    b.HasOne("UtilityBot.Domain.DomainObjects.JoinedServer", "JoinedServer")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JoinedServer");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.UserJoinConfiguration", b =>
                {
                    b.HasOne("UtilityBot.Domain.DomainObjects.JoinedServer", "JoinedServer")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JoinedServer");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.UserJoinMessage", b =>
                {
                    b.HasOne("UtilityBot.Domain.DomainObjects.JoinedServer", "JoinedServer")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JoinedServer");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.UserJoinRole", b =>
                {
                    b.HasOne("UtilityBot.Domain.DomainObjects.JoinedServer", "JoinedServer")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JoinedServer");
                });

            modelBuilder.Entity("UtilityBot.Domain.DomainObjects.VerifyMessageConfiguration", b =>
                {
                    b.HasOne("UtilityBot.Domain.DomainObjects.JoinedServer", "JoinedServer")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JoinedServer");
                });
#pragma warning restore 612, 618
        }
    }
}
